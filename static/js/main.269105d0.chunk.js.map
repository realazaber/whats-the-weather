{"version":3,"sources":["components/Weather.js","App.js","index.js"],"names":["Weather","props","undefined","city","country","id","description","Math","round","temp","feelsLike","minTemp","maxTemp","apiKey","App","useState","weather","setWeather","setCountry","setCity","type","required","onChange","target","value","console","log","onClick","lookup","require","validateInput","strInput","tmpString","toLowerCase","split","i","length","charAt","toUpperCase","slice","join","trim","byCountry","iso2","fetch","then","res","json","result","error","alert","main","name","sys","feels_like","temp_min","temp_max","ReactDOM","render","document","getElementById"],"mappings":"kMAmCeA,MAjCf,SAAiBC,GAGb,YAAmBC,IAAfD,EAAME,WAAwCD,IAAlBD,EAAMG,QAK9B,sBAAKC,GAAG,SAAR,UACI,6CACYJ,EAAME,KADlB,KAC0BF,EAAMG,QADhC,OAGA,+CACkBH,EAAMK,eAExB,+CACcC,KAAKC,MAAMP,EAAMQ,MAD/B,UAEA,uBAFA,cAGYF,KAAKC,MAAMP,EAAMS,WAH7B,aAKA,uCACUT,EAAMU,QADhB,UAEI,uBAFJ,QAGUV,EAAMW,QAHhB,gBASD,MC3BTC,G,MACC,oCADDA,EAEE,2CA8IOC,MA3If,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEA,EAA4BF,mBAAS,MAArC,mBAAKX,EAAL,KAAcc,EAAd,KACA,EAAsBH,mBAAS,MAA/B,mBAAKZ,EAAL,KAAWgB,EAAX,KAoEA,OACE,eAAC,WAAD,WACM,qBAAKd,GAAG,gBAAR,SACJ,iCACE,sDAGA,sBAAKA,GAAG,aAAR,UACE,8CACA,uBACEe,KAAK,OACLC,UAAQ,EACRC,SA9EV,SAAwBlB,GACtBc,EAAWd,EAAQmB,OAAOC,OAC1BC,QAAQC,IAAItB,MA8EN,2CACA,uBACEgB,KAAK,OACLC,UAAQ,EACRC,SA/EV,SAAqBnB,GACnBgB,EAAQhB,EAAKoB,OAAOC,OACpBC,QAAQC,IAAI,SAAWvB,MA+EjB,uBAAM,uBACN,wBAAQwB,QA5EI,WAGlB,IAAIC,EAASC,EAAQ,IAIrB,SAASC,EAAcC,GAGrB,IADA,IAAIC,EAAYD,EAASE,cAAcC,MAAM,KACpCC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpCV,QAAQC,IAAI,SAAWM,EAAUG,IACjCH,EAAUG,GAAKH,EAAUG,GAAGE,OAAO,GAAGC,cAAgBN,EAAUG,GAAGI,MAAM,GAG3E,OADAP,EAAYA,EAAUQ,KAAK,KAmB7B,GAdArC,EAAOA,EAAKsC,OACZrC,EAAUA,EAAQqC,OAKlBtC,EAAO2B,EAAc3B,GACrBC,EAAU0B,EAAc1B,GAGxBqB,QAAQC,IAAI,SAAWvB,GACvBsB,QAAQC,IAAI,YAActB,IAGZ,KAATD,GAAwB,OAATA,KAA+B,KAAZC,GAA8B,OAAZA,GACvD,IAEEA,EAAUwB,EAAOc,UAAUtC,GAASuC,KACpClB,QAAQC,IAAI,iBAAmBtB,GAE/BwC,MAAM,GAAD,OAAI/B,EAAJ,qBAA4BV,EAA5B,YAAoCC,EAApC,+BAAkES,IACtEgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJvB,QAAQC,IAAIsB,GACZ/B,EAAW+B,GAEXvB,QAAQC,IAAIV,MAGd,MAAOiC,GACPC,MAAM,6BA0BJ,uBAUuB,oBAAhBlC,EAAQmC,KACjB,cAAC,EAAD,CACEhD,KAAMa,EAAQoC,KACdhD,QAASY,EAAQqC,IAAIjD,QACrBK,KAAMO,EAAQmC,KAAK1C,KACnBC,UAAWM,EAAQmC,KAAKG,WACxB3C,QAASK,EAAQmC,KAAKI,SACtB3C,QAASI,EAAQmC,KAAKK,SACtBlD,YAAaU,EAAQA,QAAQ,GAAGmC,OAIhC,oBAAI9C,GAAG,eAAP,wDAKF,qBAAKA,GAAG,cAMN,qBAAKA,GAAG,SAAR,SACA,oDAEE,uBAFF,qCClIVoD,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.269105d0.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Weather(props) {\n    \n\n    if (props.city !== undefined && props.country !== undefined) {\n        \n        \n        return (\n        \n            <div id=\"output\">\n                <h3>\n                Weather in {props.city}, {props.country}.\n                </h3>\n                <h4>\n                    Description: {props.description}\n                </h4>\n                <h4>\n                Temperature: {Math.round(props.temp)} 째C.\n                <br />\n                Feels like {Math.round(props.feelsLike)} 째C.\n                </h4>\n                <h4>\n                    Min: {props.minTemp} 째C. \n                    <br />\n                    Max: {props.maxTemp} 째C.\n                </h4>\n            </div>\n        )\n    }    \n    else {\n        return(null);\n    }\n}\n\nexport default Weather;\n\n\n","import React, { Fragment, useState} from 'react';\nimport Weather from './components/Weather';\nimport './css/main.css';\n\nconst apiKey = {\n  key: \"c65ae928fe770da8a48731205f698b15\",\n  link: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n\n  let [country, setCountry] = useState(null);\n  let [city, setCity] = useState(null);\n\n  function funcSetCountry(country) {\n    setCountry(country.target.value);\n    console.log(country);\n  }\n\n  function funcSetCity(city) {\n    setCity(city.target.value);\n    console.log(\"City: \" + city);\n  }\n\n  \n  const findWeather = () => {\n\n    //To get the country code.\n    let lookup = require('country-code-lookup');\n\n\n    //Capitalise each word in a string.\n    function validateInput(strInput) {\n\n      let tmpString = strInput.toLowerCase().split(' ');\n      for (let i = 0; i < tmpString.length; i++) {\n        console.log(\"Fart: \" + tmpString[i]);\n        tmpString[i] = tmpString[i].charAt(0).toUpperCase() + tmpString[i].slice(1);\n      }\n      tmpString = tmpString.join(' ');\n      return tmpString;\n    }\n\n    //Remove spaces from end of strings.\n    city = city.trim();\n    country = country.trim();\n\n    //If there are multiple words in the string\n    //capitalise each word.\n\n    city = validateInput(city);\n    country = validateInput(country);\n\n    //Log to console for debugging.\n    console.log(\"City: \" + city);\n    console.log(\"Country: \" + country);\n\n    //If input fields have been filled in then get the weather data.\n    if ((city !== \"\" || city !== null) && (country !== \"\" || country !== null)) {\n      try {\n\n        country = lookup.byCountry(country).iso2;\n        console.log(\"Country code: \" + country);\n\n        fetch(`${apiKey.link}weather?q=${city},${country}&units=metric&appid=${apiKey.key}`)\n        .then(res => res.json())\n        .then(result => { \n                    \n          console.log(result);\n          setWeather(result);\n          \n          console.log(weather);\n        });\n\n      } catch (error) {\n        alert(\"Invalid Country or City\");\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n          <div id=\"mainContainer\">      \n      <main>\n        <h1>\n          What is the weather?\n        </h1>\n        <div id=\"searchForm\">\n          <h3>Country name</h3>\n          <input\n            type=\"text\"\n            required\n            onChange={funcSetCountry}\n          />\n          <h3>City name</h3>\n          <input\n            type=\"text\"\n            required\n            onChange={funcSetCity}\n          />\n          <br /><br />\n          <button onClick={findWeather}>\n            Search\n          </button>\n        </div>    \n\n        {/* \n        If the form has been filled in then \n        render the Weather component with the\n        corresponding values.\n        */}\n        {(typeof weather.main != \"undefined\") ? (\n        <Weather\n          city={weather.name}\n          country={weather.sys.country}\n          temp={weather.main.temp}\n          feelsLike={weather.main.feels_like}\n          minTemp={weather.main.temp_min}\n          maxTemp={weather.main.temp_max}\n          description={weather.weather[0].main}\n         />\n\n        ) : (\n          <h3 id=\"fillInPrompt\">\n            Please fill in country name and city name.\n          </h3>\n        )}\n\n        <div id=\"test\">\n\n        </div>\n\n      </main>\n    </div>\n          <div id=\"footer\">\n          <p>\n            &copy; Therealcoolpup\n            <br />\n            Made with openweather API\n          </p>\n        </div>\n    </Fragment>\n  );\n\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}